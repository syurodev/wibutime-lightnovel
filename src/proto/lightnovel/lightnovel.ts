// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.26.1
// source: src/grpc/proto/lightnovel/lightnovel.proto

/* eslint-disable */
import { Metadata } from '@grpc/grpc-js';
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'LIGHTNOVEL_SERVICE_GRPC_PACKAGE';

export interface CategoryLightnovelCreate {
  id: string;
  name: string;
}

export interface CreateLightnovelRequest {
  url_id: string;
  name: string;
  other_names: string[];
  categories: string[];
  author?: string | undefined;
  illustrator?: string | undefined;
  image?: string | undefined;
  summary: string;
  note?: string | undefined;
  user_id: number;
  translation_group_id?: number | undefined;
}

export interface GetLightnovelsRequest {
  page?: number | undefined;
  skip?: number | undefined;
}

export interface GetLightnovelDetailDTO {
  url_id: string;
}

export interface Category {
  name: string;
}

export interface LightnovelData {
  id: string;
  url_id: string;
  name: string;
  categories: string[];
  image?: string | undefined;
  status: number;
  created_at: string;
}

export interface LightnovelDetailData {
  id: string;
  url_id: string;
  name: string;
  other_names: string[];
  author?: string | undefined;
  illustrator?: string | undefined;
  image?: string | undefined;
  categories: string[];
  summary: string;
  deleted: boolean;
  status: number;
  note?: string | undefined;
  user_id: number;
  created_at: string;
  updated_at: string;
}

export interface ErrorResponse {
  message: string;
}

export interface LightnovelDetailResponse {
  status: number;
  message: string;
  data: LightnovelDetailData | undefined;
}

export interface LightnovelsResponse {
  status: number;
  message: string;
  data: LightnovelData[];
}

export const LIGHTNOVEL_SERVICE_GRPC_PACKAGE_NAME =
  'LIGHTNOVEL_SERVICE_GRPC_PACKAGE';

export interface LightnovelGRPCServiceClient {
  createLightnovel(
    request: CreateLightnovelRequest,
    metadata?: Metadata,
  ): Observable<LightnovelDetailResponse>;

  getLightnovelDetail(
    request: GetLightnovelDetailDTO,
    metadata?: Metadata,
  ): Observable<LightnovelDetailResponse>;

  getLightnovels(
    request: GetLightnovelsRequest,
    metadata?: Metadata,
  ): Observable<LightnovelsResponse>;
}

export interface LightnovelGRPCServiceController {
  createLightnovel(
    request: CreateLightnovelRequest,
    metadata?: Metadata,
  ):
    | Promise<LightnovelDetailResponse>
    | Observable<LightnovelDetailResponse>
    | LightnovelDetailResponse;

  getLightnovelDetail(
    request: GetLightnovelDetailDTO,
    metadata?: Metadata,
  ):
    | Promise<LightnovelDetailResponse>
    | Observable<LightnovelDetailResponse>
    | LightnovelDetailResponse;

  getLightnovels(
    request: GetLightnovelsRequest,
    metadata?: Metadata,
  ):
    | Promise<LightnovelsResponse>
    | Observable<LightnovelsResponse>
    | LightnovelsResponse;
}

export function LightnovelGRPCServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'createLightnovel',
      'getLightnovelDetail',
      'getLightnovels',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('LightnovelGRPCService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('LightnovelGRPCService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const LIGHTNOVEL_GRPC_SERVICE_NAME = 'LightnovelGRPCService';
