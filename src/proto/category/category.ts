// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.26.1
// source: src/grpc/proto/lightnovel/category.proto

/* eslint-disable */
import { Metadata } from '@grpc/grpc-js';
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'LIGHTNOVEL_CATEGORY_SERVICE_GRPC_PACKAGE';

export interface Category {
  id: string;
  name: string;
}

export interface CreateCategoryRequest {
  name: string;
}

export interface CategoryResponse {
  status: number;
  message: string;
  data: string[] | undefined;
}

export interface UpdateCategoryRequest {
  id: string;
  name: string;
}

export interface DeleteCategoryRequest {
  id: string;
}

export interface SearchCategoryRequest {
  name: string;
}

export interface CategoriesResponse {
  status: number;
  message: string;
  data: string[];
}

export interface GetCategoriesRequest {
  limit?: number | undefined;
  page?: number | undefined;
}

export interface EmptyRequest {}

export interface EmptyResponse {
  status: number;
  message: string;
}

export const LIGHTNOVEL_CATEGORY_SERVICE_GRPC_PACKAGE_NAME =
  'LIGHTNOVEL_CATEGORY_SERVICE_GRPC_PACKAGE';

export interface LightnovelCategoryGRPCServiceClient {
  createCategory(
    request: CreateCategoryRequest,
    metadata?: Metadata,
  ): Observable<CategoryResponse>;

  updateCategory(
    request: UpdateCategoryRequest,
    metadata?: Metadata,
  ): Observable<CategoryResponse>;

  deleteCategory(
    request: DeleteCategoryRequest,
    metadata?: Metadata,
  ): Observable<EmptyResponse>;

  searchCategory(
    request: SearchCategoryRequest,
    metadata?: Metadata,
  ): Observable<CategoriesResponse>;

  getCategories(
    request: GetCategoriesRequest,
    metadata?: Metadata,
  ): Observable<CategoriesResponse>;
}

export interface LightnovelCategoryGRPCServiceController {
  createCategory(
    request: CreateCategoryRequest,
    metadata?: Metadata,
  ):
    | Promise<CategoryResponse>
    | Observable<CategoryResponse>
    | CategoryResponse;

  updateCategory(
    request: UpdateCategoryRequest,
    metadata?: Metadata,
  ):
    | Promise<CategoryResponse>
    | Observable<CategoryResponse>
    | CategoryResponse;

  deleteCategory(
    request: DeleteCategoryRequest,
    metadata?: Metadata,
  ): Promise<EmptyResponse> | Observable<EmptyResponse> | EmptyResponse;

  searchCategory(
    request: SearchCategoryRequest,
    metadata?: Metadata,
  ):
    | Promise<CategoriesResponse>
    | Observable<CategoriesResponse>
    | CategoriesResponse;

  getCategories(
    request: GetCategoriesRequest,
    metadata?: Metadata,
  ):
    | Promise<CategoriesResponse>
    | Observable<CategoriesResponse>
    | CategoriesResponse;
}

export function LightnovelCategoryGRPCServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'createCategory',
      'updateCategory',
      'deleteCategory',
      'searchCategory',
      'getCategories',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('LightnovelCategoryGRPCService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('LightnovelCategoryGRPCService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const LIGHTNOVEL_CATEGORY_GRPC_SERVICE_NAME =
  'LightnovelCategoryGRPCService';
